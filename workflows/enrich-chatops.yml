definition:
  actions:
  - action: ai.agent
    args:
      actions:
      - tools.virustotal.lookup_ip_address
      model_name: gpt-4o-mini-2024-07-18
      model_provider: openai
      user_prompt: "<alert>\n${{ FN.serialize_yaml(TRIGGER || ACTIONS.alert.result)\
        \ }}\n</alert>\n\n# IP Address Enrichment Specialist\n\nYou are a Tier-1 SOC\
        \ enrichment analyst that specialises in IP reputation and threat-intelligence\
        \ look-ups.  \nYour ONLY tool is `tools__virustotal__lookup_ip_address`. The\
        \ incoming alert will contain IP addresses that need enrichment.\n\n## CRITICAL\
        \ INSTRUCTIONS \u2014 ALWAYS USE TOOL CALLS\n1. Use the available tools to\
        \ enrich the provided alert data.\n2. If you cannot extract the required IP\
        \ address from the alert, provide a brief explanation of why the IP could\
        \ not be found and do not call any tools.\n3. You have no write access to\
        \ cases \u2014 your sole responsibility is to enrich and return analysis for\
        \ the next agent.\n\n## Tool Invocation\nInvoke `tools__virustotal__lookup_ip_address`\
        \ with the `ip_address` argument set to the extracted IP address. Look for\
        \ IPs in network.dest_ip, network.source_ip, host.ip_address fields.\n\n##\
        \ Expected Follow-up Output\nAfter the tool executes you will receive the\
        \ JSON result. Respond with ONLY plain text (no markdown) containing:\n\n\
        Summary: [one-sentence verdict: Malicious | Benign | Suspicious | Unknown\
        \ based on enrichment data]\n\nKey Findings:\n- [VT malicious votes count]\n\
        - [Last analysis date]\n- [Associated malware families if any]\n- [WHOIS owner/ASN\
        \ info]\n- [Any relevant tags or categories]\n\nRaw VT Link: [public VirusTotal\
        \ URL]\n\nKeep this under 150 words; it will be consumed by the analyst_agent\
        \ without modification.\n"
    depends_on:
    - alert
    description: ''
    for_each: []
    interaction: null
    join_strategy: all
    ref: ip_address_agent
    retry_policy:
      max_attempts: 0
      retry_until: null
      timeout: 300
    run_if: ${{ FN.not_null(ACTIONS.alert.result) }}
    start_delay: 0.0
    wait_until: null
  - action: ai.agent
    args:
      actions:
      - tools.sublime.scan_file
      files:
        guardduty_alert.json: ${{ FN.to_base64(FN.serialize_json(TRIGGER || ACTIONS.alert.result))
          }}
      model_name: gpt-4o-mini-2024-07-18
      model_provider: openai
      user_prompt: "<alert>\n${{ FN.serialize_yaml(TRIGGER || ACTIONS.alert.result)\
        \ }}\n</alert>\n\n<sublime_base_url>\nhttps://platform.sublime.security\n\
        </sublime_base_url>\n\n# File Hash / Malware Enrichment Specialist\n\nYou\
        \ are a SOC enrichment analyst specialising in static malware analysis. Your\
        \ single tool is `tools__sublime__scan_file`, which accepts base64-encoded\
        \ file content and a filename.\n\nThe alert payload will include file information.\
        \ Look for file.base64_excerpt field for base64 content and file.name for\
        \ the filename. Extract these and pass them to the tool.\n\n## CRITICAL INSTRUCTIONS\
        \ \u2014 ALWAYS USE TOOL CALLS\n1. Use the available tools to enrich the provided\
        \ alert data.\n2. If you cannot extract the required file data from the alert,\
        \ provide a brief explanation of why the file information could not be found\
        \ and do not call any tools.\n3. Your role is to analyze file content and\
        \ return findings for the next agent.\n\n## Tool Invocation\nInvoke `tools__sublime__scan_file`\
        \ with `file_base64` (from file.base64_excerpt) and `file_name` (from file.name)\
        \ extracted from the alert payload.\n\n## Expected Follow-up Output\nOnce\
        \ the scan completes, respond with plain text (no markdown) containing:\n\n\
        Summary: [one-sentence verdict: Malicious | Benign | Suspicious | Unknown\
        \ based on scan findings]\n\nDetected Families: [comma-separated malware families,\
        \ or \"None detected\"]\n\nStatic Indicators:\n- File hash: [SHA256 if available]\n\
        - File type: [detected file type]\n- Signature names: [any matched signatures]\n\
        - Dropped URLs/IPs: [any extracted network indicators]\n\nRaw Report Link:\
        \ [link to the detailed Sublime report]\n\nKeep this under 150 words; it will\
        \ be forwarded to the analyst_agent.\n"
    depends_on:
    - alert
    description: ''
    for_each: null
    interaction: null
    join_strategy: all
    ref: file_agent
    retry_policy:
      max_attempts: 1
      retry_until: null
      timeout: 300
    run_if: ${{ FN.not_null(ACTIONS.alert.result) }}
    start_delay: 0.0
    wait_until: null
  - action: ai.agent
    args:
      actions:
      - tools.urlscan.lookup_url
      model_name: gpt-4o-mini-2024-07-18
      model_provider: openai
      user_prompt: "<alert>\n${{ FN.serialize_yaml(TRIGGER || ACTIONS.alert.result)\
        \ }}\n</alert>\n\n# URL Enrichment Specialist\n\nYou are a SOC enrichment\
        \ analyst specialising in URL reputation analysis. Your only tool is `tools__urlscan__lookup_url`.\n\
        \nThe alert payload will contain URLs. Look for URLs in network.urls array,\
        \ network.domain field, or any other URL references. Extract the most suspicious\
        \ URL and pass it to the tool without defanging.\n\n## CRITICAL INSTRUCTIONS\
        \ \u2014 ALWAYS USE TOOL CALLS\n1. Use the available tools to enrich the provided\
        \ alert data.\n2. If you cannot extract a valid URL from the alert, provide\
        \ a brief explanation of why no URL could be found and do not call any tools.\n\
        3. Your role is to analyze URL reputation and return findings for the next\
        \ agent.\n\n## Tool Invocation\nInvoke `tools__urlscan__lookup_url` with the\
        \ `url` extracted from the alert payload. Prioritize URLs from network.urls\
        \ array.\n\n## Expected Follow-up Output\nAfter execution, respond with plain\
        \ text (no markdown) containing:\n\nSummary: [one-sentence verdict: Malicious\
        \ | Benign | Suspicious | Unknown based on scan results]\n\nKey Observables:\n\
        - Final URL: [resolved URL after redirects]\n- IP Address: [hosting IP]\n\
        - ASN: [AS number and owner]\n- Detected threats: [any malicious findings]\n\
        - Technologies: [detected web technologies]\n\nScreenshot: [link to screenshot\
        \ if available, or \"Not available\"]\n\nRaw Report: [direct link to the full\
        \ Urlscan report]\n\nKeep this under 150 words; it will feed into the analyst_agent.\n"
    depends_on:
    - alert
    description: ''
    for_each: null
    interaction: null
    join_strategy: all
    ref: url_agent
    retry_policy:
      max_attempts: 1
      retry_until: null
      timeout: 300
    run_if: ${{ FN.not_null(ACTIONS.alert.result) }}
    start_delay: 0.0
    wait_until: null
  - action: core.transform.reshape
    args:
      value:
        alert_id: AI-SEC-20250610-0001
        event_type: EDR_FileCreation
        file:
          base64_excerpt: UE5aST0iU2hvcnQgYmFzZSIgPSAiVGVzdCBwcm9tbw==
          name: promo_offer.b64
          sha256: d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2
        host:
          email: chris@tracecat.com
          hostname: employee-laptop-01
          ip_address: 10.0.5.23
          user: Chris
        investigation:
          notes:
          - IP 167.71.94.158 appears in public urlscan reports associated with link
            relaying/spam infrastructure.
          - Base64 decoded content contains only harmless marketing text.
          remediation: User notified. No malicious intent. Flagged as phishing simulation.
          urlscan_reference: https://urlscan.io/result/1bfe3598-e26f-4101-a0ff-45a8639ef045/
        network:
          dest_ip: 167.71.94.158
          dest_port: 443
          domain: example-promo.xyz
          source_ip: 10.0.5.23
          type: http
          urls:
          - https://example-promo.xyz/offer?id=ABC123
          - https://167.71.94.158/login?session=xyz
        process:
          cmdline: powershell -EncodedCommand WwBJUCwgIlNob3J0IGJhc2UiXQ==
          name: powershell.exe
          pid: 4821
        severity: Low
        threat_model:
          category: Potential Phishing
          description: User process invoked PowerShell to decode a benign Base64-encoded
            promotional file and accessed non-catalogued domain.
          mitre_tactics:
          - T1059
          - T1566
          tags:
          - phishing-simulation
          - benign
    depends_on: []
    description: ''
    for_each: null
    interaction: null
    join_strategy: all
    ref: alert
    retry_policy:
      max_attempts: 1
      retry_until: null
      timeout: 300
    run_if: null
    start_delay: 0.0
    wait_until: null
  - action: ai.agent
    args:
      actions:
      - tools.slack.post_message
      - tools.slack.lookup_user_by_email
      model_name: o4-mini-2025-04-16
      model_provider: openai
      user_prompt: "You are a **security analyst** with a specialization in **AWS\
        \ GuardDuty** alerts and Slack notifications. You must use the tools provided\
        \ in this environment:\n\u2022 `tools__slack__lookup_user_by_email`\n\u2022\
        \ `tools__slack__post_message`\n\nYour job is to create **concise** Slack\
        \ notifications for security incidents.\n\n<alert>\n${{ FN.serialize_yaml(TRIGGER\
        \ || ACTIONS.alert.result) }}\n</alert>\n\n<alert_summary>\n${{ ACTIONS.summarize.result.output\
        \ }}\n</alert_summary>\n\n<emails_in_alert>\n${{ FN.serialize_json(ACTIONS.alert.result)\
        \ }}\n</emails_in_alert>\n\n<slack_channel>\n${{ ACTIONS.slack_channel.result\
        \ }}\n</slack_channel>\n\n<defanging_requirements>\n**CRITICAL**: All indicators\
        \ of compromise (IoCs) must be defanged:\n\u2022 **URLs**: Replace `http://`\
        \ with `hxxp://` and `https://` with `hxxps://`\n\u2022 **Domains**: Replace\
        \ `.` with `[.]` (e.g., `example.com` \u2192 `example[.]com`)\n\u2022 **IP\
        \ Addresses**: Replace `.` with `[.]` (e.g., `192.168.1.1` \u2192 `192[.]168[.]1[.]1`)\n\
        \u2022 **File Paths**: Replace `\\` with `[\\\\]` and `/` with `[/]`\n\u2022\
        \ **Email Addresses**: Replace `@` with `[@]` and `.` with `[.]`\n</defanging_requirements>\n\
        \n<task>\n0. Take the **first email address** present in <emails_in_alert>\
        \ (if the list is empty, skip Step 0 and continue without tagging).\n   \u2022\
        \ Invoke `tools__slack__lookup_user_by_email` with that email to obtain the\
        \ **Slack `user_id`**.\n\n1. Build a **concise** Slack message **using Block\
        \ Kit**. The blocks **MUST** appear in this exact order:\n   \n   A. **Header\
        \ Block** - \"{title} | Severity: {severity} from <alert>\"\n   \n   B. **Alert\
        \ Details Section** - Use section block with fields for **only the most essential\
        \ details**:\n      \u2022 Type/Event Type\n      \u2022 User\n      \u2022\
        \ Timestamp\n      \u2022 Host\n      \u2022 Process (if applicable)\n   \n\
        \   C. **Alert Summary Section** - **ONE sentence** describing what happened\
        \ (e.g., \"The activity was identified as a phishing simulation exercise involving\
        \ benign PowerShell execution.\")\n      \u2022 Do NOT include the full 5H\
        \ 1W analysis\n      \u2022 Do NOT include verbose technical details\n   \
        \   \u2022 Focus on the conclusion/verdict\n   \n   D. **Key Indicators Section**\
        \ - Present **only the most relevant** IoCs in markdown format:\n      \u2022\
        \ Include only IoCs that are critical for quick assessment\n      \u2022 Maximum\
        \ 5-7 indicators\n      \u2022 Group similar items (e.g., multiple URLs under\
        \ one bullet)\n   \n   E. **Note Section** (if applicable) - If the alert\
        \ mentions it's a simulation, test, or requires special handling, include\
        \ a brief note\n   \n   F. **Divider Block**\n   \n   G. **Binary Question\
        \ Section** - Ask the analyst to choose between:\n      \u2022 **(A)** This\
        \ is a legitimate activity / false positive\n      \u2022 **(B)** This requires\
        \ immediate investigation / is suspicious\n      \n      Include instructions\
        \ to reply in the thread with their choice.\n\n2. If a `user_id` was returned\
        \ in Step 0, **tag the user** in both:\n   \u2022 The fallback `text` field\
        \ as `<@${user_id}>`\n   \u2022 At the beginning of the Alert Summary section\n\
        \n3. Call `tools__slack__post_message` with a JSON body that includes `channel`,\
        \ `text` (fallback), and `blocks`. Post to the channel in <slack_channel>.\
        \ **Do not** supply a `thread_ts`\u2014we're creating a new parent message.\n\
        \n4. Capture the `thread_ts` that Slack returns (timestamp of the parent message).\
        \ Your final assistant message **MUST** be a JSON object that contains exactly\
        \ the keys `channel`, `blocks`, and `thread_ts`.\n</task>\n\n<brevity_guidelines>\n\
        **IMPORTANT**: Keep the notification concise and actionable:\n\u2022 Avoid\
        \ verbose technical explanations\n\u2022 Do not include the full incident\
        \ analysis report\n\u2022 Focus on what the analyst needs to know to make\
        \ a quick decision\n\u2022 Total message should be scannable in under 30 seconds\n\
        \u2022 Omit unnecessary details from the original alert\n</brevity_guidelines>\n\
        \n<response_format>\nReturn only a single JSON object with **exactly** these\
        \ keys at the root:\n{\n  \"channel\": \"<STRING>\",    // Same channel ID\
        \ used in the post\n  \"blocks\": [ \u2026 ],          // The exact blocks\
        \ array you posted\n  \"thread_ts\": \"<STRING>\"   // The thread timestamp\
        \ returned by Slack **after** posting\n}\n\n\u2022 All IoCs must be properly\
        \ defanged according to <defanging_requirements>\n\u2022 No additional keys\
        \ or nesting are allowed\n</response_format>\n\n<success_criteria>\n- Message\
        \ posts to <slack_channel> successfully\n- Notification is concise and scannable\n\
        - Does NOT include verbose 5H 1W analysis\n- Blocks render with proper severity\
        \ indicator and all required sections\n- All IoCs are properly defanged\n\
        - The targeted user is correctly tagged if an email address resolves\n- Binary\
        \ question is clear and actionable\n- Returned JSON includes only `channel`,\
        \ `blocks`, and `thread_ts` with accurate values\n</success_criteria>"
    depends_on:
    - slack_channel
    description: ''
    for_each: null
    interaction: null
    join_strategy: all
    ref: notify_user
    retry_policy:
      max_attempts: 1
      retry_until: null
      timeout: 300
    run_if: null
    start_delay: 0.0
    wait_until: null
  - action: ai.agent
    args:
      actions:
      - tools.slack.lookup_user_by_email
      - tools.slack.list_replies
      model_name: gpt-4o-mini-2024-07-18
      model_provider: openai
      user_prompt: "You are an expert AWS security analyst specializing in user behavior\
        \ analysis. Your task is to check if the notified user has responded to the\
        \ binary question in the Slack thread and determine if the alert is a false\
        \ positive. You must use the tool `tools__slack__list_replies` to retrieve\
        \ messages from the thread.\n\n<alert>\n${{ FN.serialize_yaml(TRIGGER || ACTIONS.alert.result)\
        \ }}\n</alert>\n\n<alert_summary>\n${{ ACTIONS.summarize.result }}\n</alert_summary>\n\
        \n<slack_notification>\n${{ ACTIONS.notify_user.result.output }}\n</slack_notification>\n\
        \n<slack_channel>\n${{ ACTIONS.slack_channel.result }}\n</slack_channel>\n\
        \n<task>\n1. Extract the `thread_ts` from <slack_notification>\n2. Use `tools__slack__list_replies`\
        \ with these parameters:\n   - `channel`: The channel ID from <slack_channel>\n\
        \   - `ts`: The `thread_ts` value (to get thread replies)\n\n3. Analyze the\
        \ thread messages to find the user's response:\n   - Look for messages that\
        \ reference **(A)** or **(B)** choices\n   - Extract any justification provided\
        \ by the user\n   - Note the timestamp of the response\n\n4. Determine if\
        \ this is a false positive based on the user's selection:\n   - **(A)** =\
        \ legitimate activity/false positive \u2192 `is_false_positive: true`\n  \
        \ - **(B)** = requires investigation/suspicious \u2192 `is_false_positive:\
        \ false`\n   - No response found \u2192 `is_false_positive: null`\n</task>\n\
        \n<response_validation>\nConsider a valid response if:\n- The message is from\
        \ the tagged user (check user_id if available)\n- The message clearly indicates\
        \ choice (A) or (B)\n- The message was posted after the original notification\n\
        \nIf multiple responses exist, use the first valid response chronologically.\n\
        </response_validation>\n\n<response_format>\nReturn a single JSON object with\
        \ these required fields:\n```json\n{\n  \"is_false_positive\": <boolean|null>,\
        \     // true if (A), false if (B), null if no response\n  \"user_responded\"\
        : <boolean>,              // true if user responded, false otherwise\n  \"\
        user_response\": {\n    \"choice\": \"<A|B|null>\",                 // The\
        \ choice made by the user\n    \"justification\": \"<string>\",          \
        \  // User's explanation (empty string if none)\n    \"response_time\": \"\
        <ISO8601 timestamp>\", // When user responded (null if no response)\n    \"\
        response_delay_minutes\": <number>      // Minutes between alert and response\n\
        \  },\n  \"original_question\": \"<string>\",          // The binary question\
        \ from alert_summary\n  \"alert_details\": {\n    \"alert_summary\": \"<string>\"\
        ,            // From the summarizer output\n    \"severity\": \"<string>\"\
        ,                 // Extracted from alert_summary\n    \"user\": \"<string>\"\
        ,                     // The user involved in the alert\n    \"action\": \"\
        <string>\"                    // The suspicious action performed\n  },\n \
        \ \"thread_info\": {\n    \"channel\": \"<string>\",                  // Slack\
        \ channel ID\n    \"thread_ts\": \"<string>\",                // Thread timestamp\n\
        \    \"notification_time\": \"<ISO8601>\",       // When notification was\
        \ sent\n    \"total_replies\": <number>               // Total number of replies\
        \ in thread\n  },\n  \"analyst_notes\": \"<string>\"               // Any\
        \ additional context for analysts\n}\n```\n</response_format>\n\n<edge_cases>\n\
        Handle these scenarios:\n1. **No response**: Set `is_false_positive` to `null`\
        \ and include note about pending response\n2. **Unclear response**: If user\
        \ didn't clearly choose (A) or (B), set to `null` and quote the ambiguous\
        \ response\n3. **Multiple responses**: Use the first clear response and note\
        \ if user changed their mind\n4. **Response from different user**: Note this\
        \ in `analyst_notes` but still process if it's from an authorized responder\n\
        5. **API errors**: If Slack API fails, return error status with partial data\
        \ where possible\n</edge_cases>\n\n<priority_indicators>\nFlag these situations\
        \ in `analyst_notes`:\n- Response time > 5 minutes (user was asked to respond\
        \ within 5 minutes)\n- User selected (B) - requires immediate investigation\n\
        - No response after 15 minutes - may need escalation\n- Ambiguous or unclear\
        \ responses that need clarification\n</priority_indicators>\n\n<output_schema>\n\
        The output JSON must follow this exact structure with appropriate data types:\n\
        ```json\n{\n  \"is_false_positive\": boolean|null,\n  \"user_responded\":\
        \ boolean,\n  \"user_response\": {\n    \"choice\": string|null,\n    \"justification\"\
        : string,\n    \"response_time\": string|null,\n    \"response_delay_minutes\"\
        : number|null\n  },\n  \"original_question\": string,\n  \"alert_details\"\
        : {\n    \"alert_summary\": string,\n    \"severity\": string,\n    \"user\"\
        : string,\n    \"action\": string\n  },\n  \"thread_info\": {\n    \"channel\"\
        : string,\n    \"thread_ts\": string,\n    \"notification_time\": string,\n\
        \    \"total_replies\": number\n  },\n  \"analyst_notes\": string\n}\n```\n\
        \nFill all fields based on actual data from the Slack thread and alert information.\
        \ Do not assume or pre-fill any response choices or justifications.\n</output_schema>\n\
        \n<success_criteria>\n- Correctly identifies user responses and maps to false\
        \ positive determination\n- Handles all edge cases gracefully\n- Provides\
        \ complete context for analysts to make decisions\n- Accurately calculates\
        \ response times\n- Returns valid JSON in all scenarios\n</success_criteria>"
    depends_on:
    - notify_user
    description: ''
    for_each: null
    interaction: null
    join_strategy: all
    ref: check_response
    retry_policy:
      max_attempts: 1
      retry_until: null
      timeout: 300
    run_if: null
    start_delay: 30.0
    wait_until: null
  - action: llm.openai.chat_completion
    args:
      prompt: "You are an expert AWS security analyst specializing in user behavior\
        \ analysis. Your task is to summarize user-centric GuardDuty alerts and generate\
        \ verification questions to send directly to the affected users.\n\n<alert>\n\
        ${{ FN.serialize_yaml(TRIGGER || ACTIONS.alert.result) }}\n</alert>\n\n<threat_intel>\n\
        <ip_address>\n${{ ACTIONS.ip_address_agent.result }}\n</ip_address>\n<url>\n\
        ${{ ACTIONS.url_agent.result }}\n</url>\n<files>\n${{ ACTIONS.file_agent.result\
        \ }}\n</files>\n</threat_intel>\n\n<task>\nAnalyze the user-centric GuardDuty\
        \ alert and provide:\n1. Extract 4-5 most important fields from the alert\n\
        2. Extract important IoCs from the threat intel\n3. Create a concise 1-2 sentence\
        \ summary\n4. Generate a binary question for user feedback\n</task>\n\n<instructions>\n\
        1. Populate `fields` with values for **Who, What, When, Where, Why, How**\
        \ using ORIGINAL field names, plus the SMAC labels.\n2. Set `binary_question`\
        \ to a question that can be answered with yes or no.\n3. Set `alert_summary`\
        \ to the alert's `Title` (or first sentence of `Description` if `Title` is\
        \ absent).\n4. Set `hypothesis` to a plausible reason for the activity (e.g.,\
        \ phishing simulation, red-team exercise, credential misuse).\n5. Return the\
        \ response in the exact JSON format specified.\n</instructions>\n\n<key_details_to_extract>\n\
        Prioritize these details in order of importance for user-centric alerts:\n\
        \n**Identity & Access:**\n- `Resource.AccessKeyDetails.UserName` -> The IAM\
        \ user involved\n- `Resource.AccessKeyDetails.AccessKeyId` -> The access key\
        \ used (partial)\n- `Service.Action.ActionType` -> Type of action performed\
        \ (AWS_API_CALL, etc.)\n- `Service.Action.AwsApiCallAction.Api` -> Specific\
        \ API call made\n- `Service.Action.AwsApiCallAction.ServiceName` -> AWS service\
        \ accessed\n\n**Behavioral Anomalies:**\n- `Service.AdditionalInfo.unusual*`\
        \ -> Any unusual behavior flags\n- `Service.Action.AwsApiCallAction.UserAgent`\
        \ -> User agent string (may indicate automation)\n- `Service.Action.AwsApiCallAction.RemoteIpDetails.IpAddressV4`\
        \ -> Source IP address\n- `Service.Action.AwsApiCallAction.RemoteIpDetails.Country.CountryName`\
        \ -> Geographic location\n- `Service.Action.AwsApiCallAction.RemoteIpDetails.Organization.Org`\
        \ -> ISP/Organization\n\n**Timing & Context:**\n- `CreatedAt` -> When the\
        \ alert was generated\n- `UpdatedAt` -> Last update time\n- `Service.Count`\
        \ -> Frequency of the behavior\n- `Service.EventFirstSeen` -> When this behavior\
        \ was first observed\n- `Service.EventLastSeen` -> Most recent occurrence\n\
        \n**Risk Indicators:**\n- `Severity` -> Alert severity level\n- `Confidence`\
        \ -> GuardDuty's confidence in the finding\n- `Title` -> Human-readable alert\
        \ title\n- `Description` -> Detailed explanation of the suspicious activity\n\
        </key_details_to_extract>\n\n<summary_guidelines>\nCreate a 1-2 sentence summary\
        \ that:\n- Clearly identifies the user/identity involved\n- Describes the\
        \ suspicious behavior in plain language\n- Mentions the key risk or concern\n\
        - Avoids technical jargon where possible\n- Focuses on business impact\n\n\
        Example summaries:\n- \"User john.doe performed an unusual number of S3 bucket\
        \ enumeration calls from a new geographic location (Russia), which may indicate\
        \ credential compromise or unauthorized access.\"\n- \"IAM user service-account-prod\
        \ made 847 failed API calls to restricted services within 10 minutes, suggesting\
        \ potential privilege escalation attempts or misconfigured automation.\"\n\
        \nUse the alert's existing `Title` field if present; otherwise use the first\
        \ sentence of the `Description` field. Do NOT paraphrase or rewrite this text.\n\
        \nThis preserves fidelity to the original detection context for analysts.\n\
        </summary_guidelines>\n\n<binary_question_types>\nGenerate ONE binary question\
        \ based on the alert context:\n\n**For Geographic Anomalies:**\n- \"Was this\
        \ user expected to access AWS resources from [COUNTRY/LOCATION]?\"\n- \"Is\
        \ [USER] authorized to work from [LOCATION]?\"\n- \"Did you access AWS resources\
        \ from [COUNTRY/LOCATION]?\"\n- \"Are you currently working from [LOCATION]?\"\
        \n\n**For Time-based Anomalies:**\n- \"Was [USER] expected to be working during\
        \ [TIME_PERIOD]?\"\n- \"Is automated access from [USER] during off-hours intentional?\"\
        \n- \"Were you working during [TIME_PERIOD]?\"\n- \"Did you intentionally\
        \ configure automated access during off-hours?\"\n\n**For Access Pattern Anomalies:**\n\
        - \"Was this high-volume API activity by [USER] part of planned operations?\"\
        \n- \"Is [USER] authorized to access [SERVICE/RESOURCE_TYPE]?\"\n- \"Did you\
        \ perform this high-volume API activity as part of your work?\"\n- \"Did you\
        \ intentionally access [SERVICE/RESOURCE_TYPE]?\"\n\n**For New Behavior:**\n\
        - \"Was [USER] expected to start using [NEW_SERVICE/NEW_ACCESS_PATTERN]?\"\
        \n- \"Is this new access pattern by [USER] related to a recent project or\
        \ role change?\"\n- \"Did you recently start using [NEW_SERVICE/NEW_ACCESS_PATTERN]?\"\
        \n- \"Is this new access pattern related to a recent project or role change?\"\
        \n\n**For Failed Access Attempts:**\n- \"Was [USER] expected to attempt access\
        \ to restricted resources?\"\n- \"Is [USER] currently troubleshooting access\
        \ issues that would explain these failures?\"\n- \"Did you attempt to access\
        \ these restricted resources?\"\n- \"Were you troubleshooting access issues\
        \ that would explain these failures?\"\n</binary_question_types>\n\n<smac_principles>\n\
        In line with Rapid7's SMAC framework (Status, Malice, Action, Context):\n\
        - **Status** \u2192 Track whether the alert is OPEN, ACKNOWLEDGED, or CLOSED\
        \ (default to OPEN if unknown).\n- **Malice** \u2192 Classify as `malicious`\
        \ or `benign` based **solely on the observed behavior** (do NOT mix in mitigation\
        \ context).\n- **Action** \u2192 Recommend next step (e.g. `investigate`,\
        \ `ignore`, `informational`).\n- **Context** \u2192 Add any relevant tags\
        \ (e.g. `phishing-sim`, `red-team`, `ransomware`).\n\nInclude these SMAC labels\
        \ in the output `fields` map so downstream systems can route and measure alert\
        \ handling.\n</smac_principles>\n\n<fivew1h>\nMap the most critical details\
        \ to the classic 5W1H structure for rapid triage:\n- **Who**  \u2192 The principal\
        \ or user involved (e.g. `Resource.AccessKeyDetails.UserName`)\n- **What**\
        \ \u2192 The suspicious action (e.g. `Service.Action.AwsApiCallAction.Api`\
        \ or high-level `Type`)\n- **When** \u2192 Timestamp of the activity (e.g.\
        \ `CreatedAt`)\n- **Where**\u2192 Source location or IP / AWS Region (e.g.\
        \ `Service.Action.AwsApiCallAction.RemoteIpDetails.IpAddressV4` or `CountryName`)\n\
        - **Why**  \u2192 One-line reason this is suspicious (derive from `Title`\
        \ / `Description`)\n- **How**  \u2192 Technical method used (e.g. `Service.Action.ActionType`\
        \ such as `AWS_API_CALL`, `NETWORK_CONNECTION`)\n</fivew1h>\n\nInclude each\
        \ of these six elements inside `fields` using their ORIGINAL GuardDuty field\
        \ names where applicable.\n\n<response_format>\nOutput a single, valid JSON\
        \ object with exactly these four keys:\n{\n    \"fields\": {\n        \"<ORIGINAL_FIELD_NAME>\"\
        : \"<value>\",\n        \"...\": \"...\",\n        \"status\": \"OPEN | ACKNOWLEDGED\
        \ | CLOSED\",\n        \"malice\": \"malicious | benign\",\n        \"action\"\
        : \"investigate | ignore | informational\",\n        \"context\": \"comma-separated\
        \ tags\"\n    },\n    \"alert_summary\": \"Exact Title or first sentence of\
        \ Description from the alert\",\n    \"hypothesis\": \"Brief assumption or\
        \ potential root cause (Why it happened)\",\n    \"binary_question\": \"Yes/No\
        \ question for user feedback\"\n}\n\nRequirements:\n- `fields` MUST contain\
        \ at least the six 5W1H elements mapped to original GuardDuty field names,\
        \ plus the four SMAC labels.\n- Keep `fields` flat\u2014no nested objects.\n\
        - `alert_summary` MUST be copied verbatim from `Title` (preferred) or `Description`.\n\
        - `hypothesis` should propose a plausible reason for the activity (e.g., phishing\
        \ simulation, red-team exercise, credential misuse).\n- `binary_question`\
        \ MUST be answerable with **yes** or **no**.\n</response_format>\n\n<example_output>\n\
        {\n    \"fields\": {\n        \"Resource.AccessKeyDetails.UserName\": \"marketing-automation\"\
        , // Who\n        \"Service.Action.AwsApiCallAction.Api\": \"ListBuckets\"\
        , // What\n        \"CreatedAt\": \"2025-06-10T03:47:12Z\", // When\n    \
        \    \"Service.Action.AwsApiCallAction.RemoteIpDetails.Country.CountryName\"\
        : \"Russia\", // Where\n        \"Title\": \"Anomalous S3 activity from unusual\
        \ geo\", // Why\n        \"Service.Action.ActionType\": \"AWS_API_CALL\",\
        \ // How\n        \"status\": \"OPEN\",\n        \"malice\": \"malicious\"\
        ,\n        \"action\": \"investigate\",\n        \"context\": \"geo-anomaly,credential-compromise\"\
        \n    },\n    \"alert_summary\": \"Anomalous S3 activity from unusual geo\"\
        ,\n    \"hypothesis\": \"Credentials may have been phished or reused by a\
        \ malicious actor outside the corporate region.\",\n    \"binary_question\"\
        : \"Was the marketing-automation user expected to access AWS resources from\
        \ Russia?\"\n    \"binary_question\": \"Did you access AWS resources from\
        \ Russia?\"\n}\n</example_output>"
    depends_on:
    - file_agent
    - ip_address_agent
    - url_agent
    description: ''
    for_each: null
    interaction: null
    join_strategy: all
    ref: summarize
    retry_policy:
      max_attempts: 1
      retry_until: null
      timeout: 300
    run_if: null
    start_delay: 0.0
    wait_until: null
  - action: core.transform.reshape
    args:
      value: C123123123
    depends_on:
    - summarize
    description: ''
    for_each: null
    interaction: null
    join_strategy: all
    ref: slack_channel
    retry_policy:
      max_attempts: 1
      retry_until: null
      timeout: 300
    run_if: null
    start_delay: 0.0
    wait_until: null
  config:
    environment: default
    timeout: 300.0
  description: ''
  entrypoint:
    expects: {}
    ref: null
  error_handler: null
  inputs: {}
  returns: null
  title: Baby agentic distributed alerting
  triggers: []